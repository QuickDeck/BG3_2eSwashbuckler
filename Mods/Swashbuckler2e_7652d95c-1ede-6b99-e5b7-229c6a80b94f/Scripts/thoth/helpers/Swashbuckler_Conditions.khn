local __util = require 'larian.util'

-- Helpers for 2e Swashbuckler

-- Centralise the list of finisher functions
function IsFinisher()
   return SpellId('Target_ConfidentFinisher')
   | SpellId('Target_RetreatingFinisher')
   | SpellId('Target_UnbalancingFinisher')
   | SpellId('Zone_ImpalingFinisher')
   | SpellId('Target_BleedingFinisher')
   | SpellId('Target_DualFinisher')
   | SpellId('Target_DualFinisherFreeStrike')
   | SpellId('Target_StunningFinisher')
   | SpellId('Target_StumblingFinisher')
   | SpellId('Target_TargetingFinisherArm')
   | SpellId('Target_TargetingFinisherHead')
   | SpellId('Target_TargetingFinisherLeg')
   | SpellId('Target_MobileFinisher')
end

function IsBravado()
   return SpellId('Target_DemoralizePanache')
   | SpellId('Target_FeintPanache')
   | SpellId('Target_BonMotPanache')
   | SpellId('Target_DirtyTrickPanache')
   | SpellId('Target_ShovePanache')
   | SpellId('Target_GrapplePanache')
   | SpellId('Target_TripPanache')
   | SpellId('Target_TumbleThroughPanache')
end

function AgileManeuvers()
   return SpellId('Target_Grapple')
   | SpellId('Target_Trip')
   | SpellId('Target_Disarm')
   | SpellId('Target_Shove')
   | SpellId('Target_TripPanache')
   | SpellId('Target_GrapplePanache')
   | SpellId('Target_ShovePanache')
   | SpellId('Target_DisarmPanache')
   | SpellId('Target_TripPanacheDastardly')
   | SpellId('Target_TripDastardly')
end

--[[function WieldingPiercingWeapon(entity)
   entity = entity or context.Target
   local weaponEntity = GetActiveWeapon(entity, true)
   return IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Pikes|Spears|Morningstars|Warpicks|Tridents', weaponEntity)
end

function WieldingBludgeoningWeapon(entity)
   entity = entity or context.Target
   local weaponEntity = GetActiveWeapon(entity, true)
   return IsWeaponOfProficiencyGroup('Flails|Maces|LightHammers|Clubs|Greatclubs|Warhammers|Quarterstaffs|Mauls', weaponEntity)
end

function WieldingSlashingWeapon(entity)
   entity = entity or context.Target
   local weaponEntity = GetActiveWeapon(entity, true)
   return IsWeaponOfProficiencyGroup('Scimitars|Longswords|Glaives|Handaxes|Halberds|Greataxes|Greatswords', weaponEntity)
end]]--

function WieldingOneHandedWeapon(entity)
   entity = entity or context.Target
   local weaponEntity = GetActiveWeapon(entity, true)
   return ConditionResult(IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Spears|Morningstars|Warpicks|Tridents|Flails|Maces|LightHammers|Clubs|Warhammers|Quarterstaffs|Scimitars|Longswords|Handaxes', weaponEntity).Result, {ConditionError("NeedsOneHanded")}, {ConditionError("HasOneHanded")})
end

-- Used to determine if extravagant parry should grant +2
function WieldingSingleOneHandedWeapon(entity)
   entity = entity or context.Target
   local weaponEntity = GetActiveWeapon(entity, true)
   return IsWeaponOfProficiencyGroup('Daggers|Sickles|Shortswords|Rapiers|Spears|Morningstars|Warpicks|Tridents|Flails|Maces|LightHammers|Clubs|Warhammers|Quarterstaffs|Scimitars|Longswords|Handaxes', weaponEntity)
   & (~WieldingWeapon('Melee', true, false, entity))
   & (~WieldingWeapon('Range', true, false, entity))
   & ~HasShieldEquipped()
end

function isStrike()
   return HasStringInSpellRoll('WeaponAttack') | HasStringInSpellRoll('UnarmedAttack') | HasStringInSpellRoll('ThrowAttack')
end

function IsCriticalMissSkill()
   conditionRoll = context.HitDescription.GetLastConditionRoll(ConditionRollType.ConditionSkillCheck)
   return ConditionResult(conditionRoll.NaturalRoll == 1)
   | ConditionResult(conditionRoll.Total <= (conditionRoll.Difficulty - 10))
end

function IsCriticalSkill()
   conditionRoll = context.HitDescription.GetLastConditionRoll(ConditionRollType.ConditionSkillCheck)
   return ConditionResult(conditionRoll.NaturalRoll == 20)
   | ConditionResult(conditionRoll.Total >= (conditionRoll.Difficulty + 10))
end

function IsMissSkill()
   conditionRoll = context.HitDescription.GetLastConditionRoll(ConditionRollType.ConditionSkillCheck)
   return ConditionResult(conditionRoll.Total < conditionRoll.Difficulty)
end

function IsHitSkill()
   conditionRoll = context.HitDescription.GetLastConditionRoll(ConditionRollType.ConditionSkillCheck)
   return ConditionResult(conditionRoll.Total >= conditionRoll.Difficulty)
end

function IsCriticalMissAttack()
   conditionRoll = context.HitDescription.GetLastConditionRoll(ConditionRollType.ConditionAttack)
   return ConditionResult(conditionRoll.Total <= 1)
   | ConditionResult(conditionRoll.Total <= (conditionRoll.Difficulty - 10))
end

function TheBiggerTheyAreWrapper()
   result = Enemy() & Character() & ~Self() & ~Dead() & ~TargetSizeEqualOrSmaller(Size.Medium);
   return ConditionResult(result.Result, {ConditionError("TheBiggerTheyAreTooSmall")}, {})
end

-- Never used for an actual check, but provides the chance calculation for previewing, whilst actually just always
-- returning true. This is necessary because the actual check made is via Osiris.
function TumbleThroughProxyCheck()
   DC = ReflexDC()
   Bonus = context.Source.GetPassiveSkill(Skill.Acrobatics) - 10
   Chance = (21 + Bonus - DC) / 20
   return ConditionResult(true, {}, {}, Chance)
end
